-- 1차 프로젝트

-- 환자 정보
CREATE TABLE MEDICAL_MEMBER(
	MEM_NUM VARCHAR(20) PRIMARY KEY
	,MEM_NAME VARCHAR(20) NOT NULL
	,MEM_TEL VARCHAR(50) NOT NULL UNIQUE
	,MEM_RRN VARCHAR(20) UNIQUE NOT NULL
	,MEM_ROLE VARCHAR(30) DEFAULT('USER')
);
-- 진료과
CREATE TABLE MEDICAL_DEPT(
	DEPT_NUM INT PRIMARY KEY AUTO_INCREMENT 
	,DEPT_NAME VARCHAR(30) NOT NULL
	
);
-- 의료진
CREATE TABLE MEDICAL_DOCTOR(
	DOC_NUM VARCHAR(20) PRIMARY KEY 
	,DOC_NAME VARCHAR(20) NOT NULL
	,DEPT_NUM INT  REFERENCES MEDICAL_DEPT(DEPT_NUM) ON DELETE CASCADE
	,FOREIGN KEY (DOC_NUM) REFERENCES MEDICAL_MEMBER(MEM_NUM)
	
);
-- 예약
CREATE TABLE MEDICAL_SCHEDULE(
        SCH_NUM INT PRIMARY KEY AUTO_INCREMENT
        ,DOC_NUM VARCHAR(20) REFERENCES medical_doctor(DOC_NUM) ON DELETE CASCADE
        ,MEM_NUM VARCHAR(20) REFERENCES medical_member(MEM_NUM) ON DELETE CASCADE
        ,DEPT_NUM INT REFERENCES medical_dept(DEPT_NUM) ON DELETE CASCADE -- 진료과 번호 조인
        ,REG_DATE DATETIME DEFAULT CURRENT_TIMESTAMP -- 접수날짜
        ,SCH_DATE DATE NOT NULL -- 예약날짜 년월일
        ,SCH_TIME TIME NOT NULL -- 예약 날짜 시간
        ,DETAIL VARCHAR(100)
        ,SCH_STATUS VARCHAR(10) DEFAULT('Y')  
);
-- 의사 이미지
CREATE TABLE DOCTOR_IMG(
IMG_NUM INT PRIMARY KEY AUTO_INCREMENT
, ORIGIN_FILE_NAME VARCHAR(50)
, ATTACHED_FILE_NAME VARCHAR(50) 
, DOC_NUM VARCHAR(20) REFERENCES medical_doctor(DOC_NUM)
);

-- 보드
CREATE TABLE USER_BOARD(
BOARD_NUM INT AUTO_INCREMENT PRIMARY KEY
, TITLE VARCHAR(20) NOT NULL
, WRITER VARCHAR(10) NOT NULL
, CONTENT VARCHAR(1000) NOT NULL
, CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
, MEM_NUM VARCHAR(20) REFERENCES medical_member(MEM_NUM)
);


SELECT * FROM DOCTOR_IMG;
DELETE FROM medical_member
WHERE MEM_NAME = '1111';
SELECT CONCAT(
    IF('ADMIN' = 'USER', 'CTL_', 'DOC_'),
    LPAD(IFNULL(MAX(CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)), 0) + 1, 5, '0')
) AS mem_num -- 
FROM medical_member
WHERE MEM_ROLE = 'ADMIN';
SELECT CONCAT(
    IF('DREIVER' = 'USER', 'CTL_', 'DOC_'),
    LPAD(IFNULL(MAX(CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)), 0) + 1, 5, '0')
) AS mem_num -- 
FROM medical_member
WHERE MEM_ROLE = 'ADMIN';
-- 의사랑 클라랑 두개 들어가는 테이블
-- 관리자 키 만드는거( DOC_ , ROLE 어드민 들어가기 위한 키값을 넣어야 이게 바뀐다)
INSERT INTO medical_member2 (
	MEM_NUM
 	,MEM_NAME
	,MEM_TEL
	,MEM_RRN
)VALUES (
	'DOC_00001'
	, '김수한무'
	,'11011112226'
	,'5604232222227'
);

SELECT * FROM medical_member2;

UPDATE medical_member2
SET MEM_ROLE = 'ADMIN'
WHERE MEM_NUM LIKE 'DOC%';

DELETE FROM medical_member2;

-- 다음에 들어갈 의사번호 조회
SELECT MEM_NUM
	, SUBSTRING(MEM_NUM, 5)
	, CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)
FROM medical_member2;

-- DOC_00002
SELECT CONCAT(IF('DOC_'),LPAD(IFNULL(MAX(CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)), 0) + 1, 5, '0'))    
FROM medical_member2
WHERE MEM_ROLE = 'ADMIN'; 


SELECT CONCAT('DOC_',LPAD(IFNULL(MAX(CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)), 0) + 1, 5, '0'))    
FROM medical_member2;


IFNULL(?, 0)


SELECT LPAD(3, 5, '0'), CONCAT('AA', 'BB') FROM medical_member2;

SELECT *
        FROM SALES_INFO,CAR_INFO
        WHERE CAR_INFO.MODEL_NUM = SALES_INFO.MODEL_NUM;
-- 의료진, 의사 JOIN select
SELECT DOC_NAME, DEPT_NAME
FROM medical_dept, medical_doctor
WHERE medical_dept.DEPT_NUM = medical_doctor.DEPT_NUM;

INSERT INTO medical_doctor(DOC_NAME, DEPT_NUM) VALUES ('김현경', 1);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) VALUES (8,'민정흠', 2);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) VALUES (9,'유지현', 3);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) VALUES (10,'서은송', 4);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) VALUES (11,'김형진', 5);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) VALUES (12,'정다영', 6);


DROP TABLE MEDICAL_MEMBER;
DROP TABLE medical_dept;
DROP TABLE medical_doctor;
DROP TABLE medical_schedule;
DROP TABLE DOCTOR_IMG;
DELETE FROM medical_member;


-- 2차 프로젝트

-- 의료기기 온도
CREATE TABLE TEMP_DATA (				
	TEMP_NUM INT AUTO_INCREMENT PRIMARY KEY,			
	CURRENT_TEMP DOUBLE,			
	TEMP_TIME DATETIME DEFAULT CURRENT_TIMESTAMP()			
);				
-- 다른 팀원의 파이썬 데이터 연동하기
-- 
GRANT ALL PRIVILEGES ON *.* TO 'team_mediclick'@'192.168.%' IDENTIFIED BY 'mariadb';
DROP TABLE temp_data;
INSERT INTO temp_data (
	CURRENT_TEMP
) VALUES(
	29
) ;

-- 10분 단위별로 나온데이터 평균값
SELECT 
	round(AVG(CURRENT_TEMP),1) AS avg_Temp
	,concat(floor(hour(temp_time)),':',FLOOR(MINUTE(temp_time)/10)*10) AS time_Date

FROM temp_data
GROUP BY 
	date(temp_time)
	,FLOOR(HOUR(temp_time))
	,FLOOR(MINUTE(temp_time)/10)*10
;

-- 현재 시간에 한이후 간격 (10:20분이라면 10:00 ~ 11:00 사이의 값)
SELECT * 
FROM temp_data
WHERE temp_time >= DATE_FORMAT(NOW(),'%Y-%M-%D %H:00:00')
AND temp_time < DATE_FORMAT(NOW() + INTERVAL(1) HOUR,'%Y-%M-%D %H:00:00');
SELECT FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP(temp_time) / 600) * 600) AS temp_time
		,AVG(
FROM temp_data
GROUP BY FROM_UNIXTIME(FLOOR(UNIX_TIMESTAMP(temp_time) / 600) * 600)
;

-- 오름차순으로 조회 최신데이터
SELECT * from temp_data
ORDER BY temp_time desc;
SELECT * FROM temp_data;
SELECT CONCAT(
            IF('USER' = 'ADMIN', 'CTL_', 'DOC_'),
            LPAD(IFNULL(MAX(CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)), 0) + 1, 5, '0') 
            ) AS mem_num
    FROM medical_member
    WHERE MEM_ROLE = 'ADMIN';

SELECT CASE
       WHEN MEM_ROLE = 'ADMIN' THEN 'DOC_'
       WHEN MEM_ROLE = 'USER' THEN 'CLT_'
   END
FROM medical_member
WHERE MEM_ROLE = 'USER';  

SUBSTRING(MEM_NUM, 5)
SELECT CONCAT(
            CASE
                WHEN MEM_ROLE = 'ADMIN' THEN 'DOC_'
                WHEN MEM_ROLE = 'USER' THEN 'CLT_'
            END,
            LPAD(IFNULL(MAX(CAST(SUBSTRING(MEM_NUM, 5) AS UNSIGNED)), 0) + 1, 5, '0') MEM_NUM
    FROM medical_member;
SELECT  FROM medical_doctor;

SELECT * FROM medical_doctor;


CREATE TABLE medical_member2(
	MEM_NUM VARCHAR(50) PRIMARY KEY
	,MEM_NAME VARCHAR(20) NOT NULL
	,MEM_TEL VARCHAR(50) NOT NULL UNIQUE
	,MEM_RRN VARCHAR(20) UNIQUE NOT NULL
	,MEM_ROLE VARCHAR(30) DEFAULT('USER')
);


-- 
-- 3차 프로젝트

-- 상품정보
CREATE TABLE PRODUCTS(
        PRODUCT_NUM INT AUTO_INCREMENT PRIMARY KEY
        , PRODUCT_NAME VARCHAR(100) NOT NULL 
        , CATE_NUM INT REFERENCES CATEGORY(CATE_NUM) ON DELETE CASCADE
        , PRODUCT_PRICE INT NOT NULL
        , STOCK INT NOT NULL 
        , DETAIL VARCHAR(300)
        , INCOMING_QTY DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 카테고리
CREATE TABLE CATEGORY(
        CATE_NUM INT AUTO_INCREMENT PRIMARY KEY
        , CATE_NAME VARCHAR(100) NOT NULL UNIQUE
);
SELECT * FROM CATEGORY;
CREATE TABLE item_img (
        IMG_CODE INT AUTO_INCREMENT PRIMARY KEY
        , ORIGIN_FILE_NAME VARCHAR(100) NOT NULL
        , ATTACHED_FILE_NAME VARCHAR(100) NOT NULL
        , PRODUCT_NUM INT REFERENCES PRODUCTS (PRODUCT_NUM ) ON DELETE CASCADE
);

-- 거래처
CREATE TABLE CUSTOMERS(
        CUSTOMER_NUM INT AUTO_INCREMENT PRIMARY KEY
        , CUSTOMER_NAME VARCHAR(100) NOT NULL UNIQUE
        , CUSTOMER_OWNER VARCHAR(50) NOT NULL 
        , BUSINESS_NUMBER VARCHAR(100) NOT NULL
        , CUSTOMER_ADDR VARCHAR(200) NOT NULL
        , CUSTOMER_TEL VARCHAR(50) NOT NULL
        , CUSTOMER_EMAIL VARCHAR(50) UNIQUE
);
SELECT * FROM customers;

DELETE FROM category;
DROP TABLE products;
DROP TABLE item_img;
DROP TABLE ORDER_REQUESTS;
DROP TABLE ORDERS;
DROP TABLE DELIVERY;
DROP TABLE INVENTORY;

SELECT * FROM medical_member; 
SELECT * FROM medical_doctor;
SELECT * FROM customers; -- 거래처
SELECT * FROM order_requests; -- 발주
SELECT * FROM orders; -- 수주
SELECT * FROM delivery; -- 배송
SELECT * FROM delivery d,orders o
WHERE d.ORDER_NUM = o.ORDER_NUM;

SELECT * FROM products;
ALTER TABLE orders
RENAME COLUMN deliveryStartTime DATETIME NULL;


-- 결제
CREATE TABLE PAYMENTS(
 PAYMENT_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , PAYMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , AMOUNT INT NOT NULL 
 , PAYMENT_METHOD VARCHAR(100) NOT NULL 
 , PAYMENT_STATUS ENUM('결제대기', '결제완료', '결제취소') NOT NULL DEFAULT '결제완료'
);

 DROP TABLE ORDER_REQUESTS;
 DROP TABLE PAYMENTS;
 DROP TABLE INVENTORY;

-- 데이터 삭제
ALTER TABLE DELIVERY DROP FOREIGN KEY delivery_ibfk_1;
ALTER TABLE DELIVERY DROP COLUMN DELIVERY_NUM;
ALTER TABLE DELIVERY DROP COLUMN DELIVERY_START_TIME;
ALTER TABLE DELIVERY DROP COLUMN DELIVERY_END_TIME;
ALTER TABLE orders CREATE COLUMN DELIVERY_END_TIME;
-- 추가
ALTER TABLE orders
ADD COLUMN DELIVERY_NUM INT REFERENCES delivery(DELIVERY_NUM) ON DELETE CASCADE,
ADD COLUMN DELIVERY_START_TIME DATETIME NULL,
ADD COLUMN DELIVERY_END_TIME DATETIME NULL;
SHOW CREATE TABLE delivery;
ALTER TABLE Orders
CHANGE deliveryEndTime DELIVERY_END_TIME DATETIME NULL;
-- 발주 내쪽에 물건을 집어넣는다.부족한 재고 충당.
CREATE TABLE ORDER_REQUESTS(
 REQUEST_NUM INT AUTO_INCREMENT PRIMARY KEY
 , PRODUCT_NUM INT REFERENCES PRODUCTS(PRODUCT_NUM) ON DELETE CASCADE
 , CUSTOMER_NUM INT REFERENCES CUSTOMERS(CUSTOMER_NUM) ON DELETE CASCADE
 , QUANTITY INT NOT NULL
 ,REQUEST_STATUS ENUM('배송대기','배송완료', '주문취소') NOT NULL DEFAULT '배송대기'
 , REQUEST_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);
-- 수주 테이블 내물건을 병원에 보낸다.
CREATE TABLE ORDERS(
 ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , ORDER_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , ORDER_STATUS ENUM('배송대기', '배송중', '배송완료', '주문취소') NOT NULL DEFAULT '배송대기'
 , DELIVERY_START_TIME DATETIME NULL  -- 출발
 , DELIVERY_END_TIME DATETIME NULL  -- 도착
 , DELIVERY_NUM INT REFERENCES delivery(DELIVERY_NUM) ON DELETE CASCADE
);
-- 배송
CREATE TABLE DELIVERY(
    DELIVERY_NUM INT AUTO_INCREMENT PRIMARY KEY,
	 DELIVERY_DRIVER_NAME VARCHAR(100) NOT NULL, -- 기사이름
    DELIVERY_DRIVER_PHONE VARCHAR(20) NOT NULL, -- 기사 번호
    DELIVERY_STATUS ENUM('배송대기', '배송중', '배송완료','배송취소', '반품') NOT NULL DEFAULT '배송대기' -- 배송 상태
);
SELECT 
    P.PRODUCT_NAME,
    O.ORDER_NUM,
    O.REQUEST_NUM,
    O.ORDER_DATE,
    O.ORDER_STATUS,
    C.CUSTOMER_NUM,
    C.CUSTOMER_NAME,
    C.CUSTOMER_ADDR,
    IFNULL(D.DELIVERY_DRIVER_NAME,'-') AS DELIVERY_DRIVER_NAME,
    IFNULL(D.DELIVERY_DRIVER_PHONE,'-') AS DELIVERY_DRIVER_PHONE,
    (R.QUANTITY * P.PRODUCT_PRICE) AS TOTALPRICE
FROM 
    orders O
JOIN 
    order_requests R ON O.REQUEST_NUM = R.REQUEST_NUM
JOIN 
    customers C ON R.CUSTOMER_NUM = C.CUSTOMER_NUM
JOIN 
    products P ON R.PRODUCT_NUM = P.PRODUCT_NUM
LEFT JOIN 
    delivery D ON O.DELIVERY_NUM = D.DELIVERY_NUM
WHERE 
    O.REQUEST_NUM = R.REQUEST_NUM;
SELECT
        P.PRODUCT_NAME,
        O.ORDER_NUM,
        O.REQUEST_NUM,
        O.ORDER_DATE,
        O.ORDER_STATUS,
        C.CUSTOMER_NUM,
        C.CUSTOMER_NAME,
        C.CUSTOMER_ADDR,
        D.DELIVERY_NUM,
        IFNULL(D.DELIVERY_DRIVER_NAME,'-') AS DELIVERY_DRIVER_NAME,
        IFNULL(D.DELIVERY_DRIVER_PHONE,'-') AS DELIVERY_DRIVER_PHONE,
        (R.QUANTITY * P.PRODUCT_PRICE) AS TOTALPRICE
        FROM
        orders O
        JOIN
        order_requests R ON O.REQUEST_NUM = R.REQUEST_NUM
        JOIN
        customers C ON R.CUSTOMER_NUM = C.CUSTOMER_NUM
        JOIN
        products P ON R.PRODUCT_NUM = P.PRODUCT_NUM
        LEFT JOIN
        delivery D ON O.DELIVERY_NUM = D.DELIVERY_NUM
        WHERE
        O.REQUEST_NUM = R.REQUEST_NUM
        order by o.ORDER_STATUS , o.ORDER_DATE DESC;
SELECT * from delivery;
SELECT * FROM orders;
WHERE DELIVERY_DRIVER_NAME = '배달';
-- 재고 테이블
CREATE TABLE INVENTORY(
INVENTORY_NUM INT AUTO_INCREMENT PRIMARY KEY
, CATE_NUM INT REFERENCES category(CATE_NUM) ON DELETE CASCADE
, PRODUCT_NUM INT REFERENCES products(PRODUCT_NUM) ON DELETE CASCADE
, PRODUCT_NAME VARCHAR(100) NOT NULL
, STOCK_DATE DATETIME DEFAULT CURRENT_TIMESTAMP -- 입고 일자
, OUT_DATE DATETIME -- 출고 일자
, INITIAL_STOCK INT NOT NULL -- 최초 재고
, INCOMING_QTY INT NOT NULL -- 입고 수량
, OUTGOING_QTY INT NOT NULL -- 출고 수량
, CURRENT_STOCK INT -- 현재 수량 20241008에 추가했어요~ 
);



INSERT INTO CUSTOMERS(
        CUSTOMER_NAME
        ,CUSTOMER_ADDR
        ,CUSTOMER_TEL
        ,CUSTOMER_EMAIL
        ,CUSTOMER_OWNER 
        ,BUSINESS_NUMBER 
) VALUES(
        '부산병원'
        ,'부산광역시 부산진구 개금동 34-1'
        ,'051-123-0191'
        ,'busanhospital@gmail.com'
        ,'김부산'
        ,'124-1034-1'
);

INSERT INTO CATEGORY(
        CATE_NAME
) VALUES(
        '의약품'
);
SELECT * FROM delivery;
SELECT * FROM ORDER_REQUESTS;
SELECT * FROM ORDERS;
SELECT * FROM CUSTOMERS;

INSERT INTO PRODUCTS(
        PRODUCT_NAME
        ,CATE_NUM
        ,PRODUCT_PRICE
        ,STOCK
        ,DETAIL
) VALUES(
        '경동아스피린장용정'
        ,1
        ,2000
        ,300
        ,'심혈관질환 및 혈전 예방약'
);

INSERT INTO order_requests(
        PRODUCT_NUM
        ,QUANTITY
        ,CUSTOMER_NUM
) VALUES(
        3
        ,1
        ,10
);

INSERT INTO PAYMENTS(
        REQUEST_NUM
        ,AMOUNT
        ,PAYMENT_METHOD
) VALUES(
        1
        ,60000
        ,'CASH'
);

INSERT INTO ORDERS(
        REQUEST_NUM
) VALUES(
        10
);

-- 데이터 넣는순서 
-- 아이템 > 거래처 > 발주 > 수주 > 결제 > 배송 > 재고
-- 트리거 insert (거래처>공급사)			
CREATE TRIGGER order_orderRequest			
	AFTER INSERT		
	ON ORDER_REQUESTS		
	FOR EACH ROW		
INSERT INTO ORDERS (REQUEST_NUM, ORDER_DATE, ORDER_STATUS)			
VALUES (NEW.REQUEST_NUM, NOW(), '배송대기');			
			
			
-- 트리거 UPDATE 주문취소 (거래처>공급사)			
DELIMITER //			
			
CREATE TRIGGER order_orderRequest_update			
	AFTER UPDATE		
	ON ORDER_REQUESTS		
	FOR EACH ROW		
BEGIN			
	IF NEW.REQUEST_STATUS='주문취소' THEN		
		UPDATE orders	
		SET ORDER_STATUS='주문취소'	
		WHERE REQUEST_NUM=NEW.REQUEST_NUM;	
	END IF;
END; //			;
			
DELIMITER;			

-- 트리거 UPDATE 배송완료 (공급사>거래처)		
DELIMITER //		
		
CREATE TRIGGER order_orderRequest_update_cancel		
AFTER UPDATE		
ON ORDERS		
FOR EACH ROW		
BEGIN		
	IF NEW.ORDER_STATUS = '배송완료' THEN	
		UPDATE order_requests
		SET REQUEST_STATUS = '배송완료'
		WHERE REQUEST_NUM = NEW.REQUEST_NUM;
	END IF;	
END; //		
		
DELIMITER ;		
SHOW TRIGGERS;
DROP TRIGGER IF EXISTS order_orderRequest;
DROP TRIGGER IF EXISTS order_orderRequest_update;
DROP TRIGGER IF EXISTS order_orderRequest_update_cancel;
 


-- 트리거를 이용해 CURRENT_STOCK 값을 자동 계산하는 방법
DELIMITER //

CREATE TRIGGER update_current_stock
BEFORE INSERT ON INVENTORY
FOR EACH ROW
BEGIN
    SET NEW.CURRENT_STOCK = NEW.INITIAL_STOCK + NEW.INCOMING_QTY - NEW.OUTGOING_QTY;
END //

DELIMITER ;


DELIMITER //

-- 입고또는 출고시 재고 변경
CREATE TRIGGER update_current_stock_after_change
BEFORE UPDATE ON INVENTORY
FOR EACH ROW
BEGIN

    IF NEW.INCOMING_QTY != OLD.INCOMING_QTY THEN
              
        SET NEW.CURRENT_STOCK = OLD.CURRENT_STOCK + (NEW.INCOMING_QTY - OLD.INCOMING_QTY);
    END IF;

    -- 출고 수량만 변경된 경우
    IF NEW.OUTGOING_QTY != OLD.OUTGOING_QTY THEN
        SET NEW.CURRENT_STOCK = OLD.CURRENT_STOCK - (NEW.OUTGOING_QTY - OLD.OUTGOING_QTY);
    END IF;
END //

DELIMITER ;
SELECT * FROM INFORMATION_SCHEMA.TRIGGERS ;
DROP TRIGGER  update_current_stock;
DROP TRIGGER  update_current_stock_after_change;

CREATE TRIGGER AFTER_INSERT_PRODUCTS
AFTER INSERT ON PRODUCTS
FOR EACH ROW
INSERT INTO INVENTORY (
       CATE_NUM, 
       PRODUCT_NUM, 
       PRODUCT_NAME, 
       STOCK_DATE,
       INITIAL_STOCK, 
       INCOMING_QTY, 
       OUTGOING_QTY, 
       CURRENT_STOCK
   ) VALUES (
       NEW.CATE_NUM,          
       NEW.PRODUCT_NUM,       
       NEW.PRODUCT_NAME,      
       NOW(),           
       NEW.STOCK,             
       NEW.STOCK,             
       0,                     
       NEW.STOCK              
   );
